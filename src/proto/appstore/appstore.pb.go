// Code generated by protoc-gen-go.
// source: appstore.proto
// DO NOT EDIT!

/*
Package appstore is a generated protocol buffer package.

It is generated from these files:
	appstore.proto

It has these top-level messages:
	Request
	Product
	Response
*/
package appstore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Request struct {
	ReceiptData string `protobuf:"bytes,1,opt,name=receipt_data" json:"receipt_data,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

type Product struct {
	ProductId string `protobuf:"bytes,1,opt,name=product_id" json:"product_id,omitempty"`
	ItemId    string `protobuf:"bytes,2,opt,name=item_id" json:"item_id,omitempty"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}

type Response struct {
	Status   int32      `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	OrderId  string     `protobuf:"bytes,2,opt,name=order_id" json:"order_id,omitempty"`
	Products []*Product `protobuf:"bytes,3,rep,name=products" json:"products,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}

func (m *Response) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for AppleIapService service

type AppleIapServiceClient interface {
	ApplePayVerify(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type appleIapServiceClient struct {
	cc *grpc.ClientConn
}

func NewAppleIapServiceClient(cc *grpc.ClientConn) AppleIapServiceClient {
	return &appleIapServiceClient{cc}
}

func (c *appleIapServiceClient) ApplePayVerify(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/appstore.AppleIapService/ApplePayVerify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppleIapService service

type AppleIapServiceServer interface {
	ApplePayVerify(context.Context, *Request) (*Response, error)
}

func RegisterAppleIapServiceServer(s *grpc.Server, srv AppleIapServiceServer) {
	s.RegisterService(&_AppleIapService_serviceDesc, srv)
}

func _AppleIapService_ApplePayVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AppleIapServiceServer).ApplePayVerify(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _AppleIapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appstore.AppleIapService",
	HandlerType: (*AppleIapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplePayVerify",
			Handler:    _AppleIapService_ApplePayVerify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
