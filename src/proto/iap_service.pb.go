// Code generated by protoc-gen-go.
// source: iap_service.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	iap_service.proto

It has these top-level messages:
	IosRequest
	Product
	IosResponse
	GPRequest
	GPResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IosRequest struct {
	ReceiptData string `protobuf:"bytes,1,opt,name=receipt_data" json:"receipt_data,omitempty"`
}

func (m *IosRequest) Reset()         { *m = IosRequest{} }
func (m *IosRequest) String() string { return proto1.CompactTextString(m) }
func (*IosRequest) ProtoMessage()    {}

type Product struct {
	ProductId string `protobuf:"bytes,1,opt,name=product_id" json:"product_id,omitempty"`
	ItemId    string `protobuf:"bytes,2,opt,name=item_id" json:"item_id,omitempty"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto1.CompactTextString(m) }
func (*Product) ProtoMessage()    {}

type IosResponse struct {
	Status   int32      `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	OrderId  string     `protobuf:"bytes,2,opt,name=order_id" json:"order_id,omitempty"`
	Products []*Product `protobuf:"bytes,3,rep,name=products" json:"products,omitempty"`
}

func (m *IosResponse) Reset()         { *m = IosResponse{} }
func (m *IosResponse) String() string { return proto1.CompactTextString(m) }
func (*IosResponse) ProtoMessage()    {}

func (m *IosResponse) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

type GPRequest struct {
	InappPurchaseData string `protobuf:"bytes,1,opt,name=inapp_purchase_data" json:"inapp_purchase_data,omitempty"`
	Signature         string `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (m *GPRequest) Reset()         { *m = GPRequest{} }
func (m *GPRequest) String() string { return proto1.CompactTextString(m) }
func (*GPRequest) ProtoMessage()    {}

type GPResponse struct {
	Status    int32  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Options   string `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
	ProductId string `protobuf:"bytes,3,opt,name=product_id" json:"product_id,omitempty"`
}

func (m *GPResponse) Reset()         { *m = GPResponse{} }
func (m *GPResponse) String() string { return proto1.CompactTextString(m) }
func (*GPResponse) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for IAPService service

type IAPServiceClient interface {
	ApplePayVerify(ctx context.Context, in *IosRequest, opts ...grpc.CallOption) (*IosResponse, error)
	GooglePayVerify(ctx context.Context, in *GPRequest, opts ...grpc.CallOption) (*GPResponse, error)
}

type iAPServiceClient struct {
	cc *grpc.ClientConn
}

func NewIAPServiceClient(cc *grpc.ClientConn) IAPServiceClient {
	return &iAPServiceClient{cc}
}

func (c *iAPServiceClient) ApplePayVerify(ctx context.Context, in *IosRequest, opts ...grpc.CallOption) (*IosResponse, error) {
	out := new(IosResponse)
	err := grpc.Invoke(ctx, "/proto.IAPService/ApplePayVerify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAPServiceClient) GooglePayVerify(ctx context.Context, in *GPRequest, opts ...grpc.CallOption) (*GPResponse, error) {
	out := new(GPResponse)
	err := grpc.Invoke(ctx, "/proto.IAPService/GooglePayVerify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IAPService service

type IAPServiceServer interface {
	ApplePayVerify(context.Context, *IosRequest) (*IosResponse, error)
	GooglePayVerify(context.Context, *GPRequest) (*GPResponse, error)
}

func RegisterIAPServiceServer(s *grpc.Server, srv IAPServiceServer) {
	s.RegisterService(&_IAPService_serviceDesc, srv)
}

func _IAPService_ApplePayVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(IosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(IAPServiceServer).ApplePayVerify(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _IAPService_GooglePayVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(IAPServiceServer).GooglePayVerify(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _IAPService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IAPService",
	HandlerType: (*IAPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplePayVerify",
			Handler:    _IAPService_ApplePayVerify_Handler,
		},
		{
			MethodName: "GooglePayVerify",
			Handler:    _IAPService_GooglePayVerify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
